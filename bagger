#!/usr/bin/env bash

# Enable BASH 4's globstar
shopt -s globstar

# Enable colors
BOLD_BLUE="\033[1;34m"
BOLD_GREEN="\033[1;32m"
BOLD_RED="\033[31m"
CYAN="\033[36m"
MAGENTA="\033[35m"
YELLOW="\033[33m"
NORMAL="\033[0m"


__save_screen () {
	printf "\033[?1049h"
}

__restore_screen () {
	printf "\033[r\033[?1049l"
}

__clear_screen () {
	printf "\033[H\033[2J"
}
__place_cursor () {
	printf "\033[${1};${2}H"
}

__clear_line () {
	printf "\033[K"
}

# Obtain the song length of the current FLAC file
__song_length () {
	# Obtain the total number of samples in current file
    total_samples="$(metaflac --show-total-samples "${album_flacs_array[${flac}]}")"

    # Obtain the sample rate in current file
    sample_rate="$(metaflac --show-sample-rate "${album_flacs_array[${flac}]}")"

    # This the total number of time in minutes (with the decimal [seconds]
    # moved to the right 3 places to account for non integer division
    total_time_in_minutes_with_decimal_moved="$(( ${total_samples} * 1000 / ${sample_rate} / 60 ))"

    # This is the total number of minutes (moves the decimal
    # back to the left 3 places and culls the 'decimal')
    total_minutes="$(( ${total_time_in_minutes_with_decimal_moved} / 1000 ))"

    # If the song is really short (less than a minute, do not offset the
    # string when obtaining just the remaining song time
    #
    # This is essentiall a percentage decimal (eg .832) but with the
    # decimal moved 3 places to the right
    if [[ "${total_minutes}" -eq 0 ]] ; then
        remaining_time_decimal_percentage="${total_time_in_minutes_with_decimal_moved}"
    else
        remaining_time_decimal_percentage="${total_time_in_minutes_with_decimal_moved:${#total_minutes}}"
    fi

    # Remove any leading zeroes from the remaining time so BASH can
    # successfully multiply the time without thinking the number is
    # an octal number
    #
    # (eg. 078 -> 78 or 008 -> 08)
    remaining_time_decimal_percentage="${remaining_time_decimal_percentage#0}"
    # (eg. 08 -> 8)
    remaining_time_decimal_percentage="${remaining_time_decimal_percentage#0}"

    # This is the remaining time 'percentage' multiplied by 60 to obtain the
    # total seconds (again, the decimal is moved 3 places to the right)
    remaining_seconds_unformatted="$(( ${remaining_time_decimal_percentage} * 60 ))"

    # Check the string length of the remaining seconds and prepend
    # the necessary amount of zeroes to ensure we always end
    # up with exactly five (5) characters (for consistency)
    case "${#remaining_seconds_unformatted}" in
        5)
            # Do nothing
            :
        ;;
        4)
            remaining_seconds_unformatted="0${remaining_seconds_unformatted}"
        ;;
        3)
            remaining_seconds_unformatted="00${remaining_seconds_unformatted}"
        ;;
        2)
            remaining_seconds_unformatted="000${remaining_seconds_unformatted}"
        ;;
        1)
            remaining_seconds_unformatted="0000${remaining_seconds_unformatted}"
        ;;
        0)
            remaining_seconds_unformatted="00000${remaining_seconds_unformatted}"
        ;;
        *)
            # Should NOT ever happen
            printf "%s\n" "This is a bug!"
            exit 1
        ;;
    esac

    # This is the total number of seconds obtained from the
    # above string: ${remaining_seconds_unformatted}, with the
    # extra 'decimal places' removed
    total_seconds="${remaining_seconds_unformatted:0:2}"

    # This is the value right after the remaining seconds last
    # digit, essentially a decimal number.  This will be
    # used to round up or down.
    round_up_value="${remaining_seconds_unformatted:2:1}"

    # If ${round_up_value} is greater or equal to five (5),
    # round up by adding one to the total seconds
    if [[ "${round_up_value}" -ge 5 ]] ; then
        total_seconds="${total_seconds#0}"
        ((total_seconds++))
    fi

    # If the total seconds is only one digit (eg. 0-9), then
    # prepend a zero in front to allow consistent spacing
    if [[ "${#total_seconds}" -eq 1 ]] ; then
        total_seconds="0${total_seconds}"
    fi

    # If the total seconds is 60 (as a result of rounding up),
    # then set the total seconds to '00' (for formatting) and add
    # one to the total minutes
    if [[ "${total_seconds}" == "60" ]] ; then
        total_seconds=00
        ((total_minutes++))
    fi

    # This will print the resultant song length
    printf "%s" "${total_minutes}:${total_seconds}"
}

__save_album_tags_prompt () {
	printf "%s${CYAN}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_RED}%s${NORMAL}%s" \
	" Save " "album" " METADATA? [" "Yes" "/" "No" "] "
	while read -e -r ; do
		case "${REPLY}" in
			[Yy] | "")
				retag_album="true"
				break
			;;
			[Yy][Ee][Ss])
				retag_album="true"
				break
			;;
			[Nn])
				retag_album="false"
				break
			;;
			[Nn][Oo])
				retag_album="false"
				break
			;;
			*)
				printf "%s\n" "Unknown answer: ${REPLY}. Exiting..."
				exit 1
			;;
		esac
	done
}

__save_track_tags_prompt () {
	printf "\n\033[K%s${CYAN}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_RED}%s${NORMAL}%s" \
	" Save " "track" " METADATA? [" "Yes" "/" "No" "] "
	while read -e -r ; do
		case "${REPLY}" in
			[Yy] | "")
				retag_tracks="true"
				break
			;;
			[Yy][Ee][Ss])
				retag_tracks="true"
				break
			;;
			[Nn])
				retag_tracks="false"
				break
			;;
			[Nn][Oo])
				retag_tracks="false"
				break
			;;
			*)
				printf "%s\n" "Unknown answer: ${REPLY}. Exiting..."
				exit 1
			;;
		esac
	done
}

__tag_directory_final_prompt () {
	# Separator line
	printf "%s${BOLD_RED}%s${NORMAL}\n" " " "▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄"

	# The total number of lines to be used so far
	total_lines=$(( ${current_line} + 4 ))

	# Place the next separator line below the upcoming prompt
	__place_cursor "${total_lines}" 0

	# Separator line
	printf "%s${BOLD_RED}%s${NORMAL}\n" " " "▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀"

	# Return the cursor positions to where it would normally
	# be (after the first separator line
	__place_cursor "$(( ${total_lines} - 1 ))" 0

	# Prompt
	printf "%s${CYAN}%s${NORMAL}%s${BOLD_GREEN}%s${NORMAL}%s${BOLD_RED}%s${NORMAL}%s" \
	" Tag " "all" " files in current directory? [" "Yes" "/" "No" "] "

	# Place the next separator line below the upcoming prompt
	__place_cursor "$(( ${total_lines} - 1 ))" 47

	while read -r ; do
		case "${REPLY}" in
			[Yy] | "")
				__retag_album
				__retag_tracks
				printf "\n"
				break
			;;
			[Yy][Ee][Ss])
				__retag_album
				__retag_tracks
				printf "\n"
				break
			;;
			[Nn])
				printf "\n"

				# Restore screen settings
				__restore_screen

				exit 1
			;;
			[Nn][Oo])
				printf "\n"

				# Restore screen settings
				__restore_screen

				exit 1
			;;
			*)
				printf "\n%s\n" "Unknown answer: ${REPLY}. Exiting..."

				# Restore screen settings
				__restore_screen

				exit 1
			;;
		esac
	done

}
__retag_album () {
	# Only set tags if there was a new tag specified, otherwise skip tagging
	# for that specific field and continue on

	# Set new ARTIST tag
	if [[ -n "${artist_tag}" ]] ; then
		metaflac --remove-tag=ARTIST "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
		metaflac --set-tag=ARTIST="${artist_tag}" "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
	fi

	# Set new ALBUM tag
	if [[ -n "${album_tag}" ]] ; then
		metaflac --remove-tag=ALBUM "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
		metaflac --set-tag=ALBUM="${album_tag}" "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
	fi

	# Set new DISCNUMBER tag
	if [[ -n "${discnumber_tag}" ]] ; then
		metaflac --remove-tag=DISCNUMBER "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
		metaflac --set-tag=DISCNUMBER="${discnumber_tag}" "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
	fi

	# Set new DATE tag
	if [[ -n "${date_tag}" ]] ; then
		metaflac --remove-tag=DATE "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
		metaflac --set-tag=DATE="${date_tag}" "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
	fi

	# Set new TRACKTOTAL tag
	if [[ -n "${tracktotal_tag}" ]] ; then
		metaflac --remove-tag=TRACKTOTAL "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
		metaflac --set-tag=TRACKTOTAL="${tracktotal_tag}" "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
	fi

	# Set new GENRE tag
	if [[ -n "${genre_tag}" ]] ; then
		metaflac --remove-tag=GENRE "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
		metaflac --set-tag=GENRE="${genre_tag}" "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
	fi

	# Set new RELEASETYPE tag
	if [[ -n "${releasetype_tag}" ]] ; then
		metaflac --remove-tag=RELEASETYPE "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
		metaflac --set-tag=RELEASETYPE="${releasetype_tag}" "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
	fi

	# Set new SOURCE tag
	if [[ -n "${source_tag}" ]] ; then
		metaflac --remove-tag=SOURCE "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
		metaflac --set-tag=SOURCE="${source_tag}" "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
	fi

	# Set new MASTERING tag
	if [[ -n "${mastering_tag}" ]] ; then
		metaflac --remove-tag=MASTERING "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
		metaflac --set-tag=MASTERING="${mastering_tag}" "${flac_directories[${current_directory}]}"/*.[Ff][Ll][Aa][Cc]
	fi
}

__retag_tracks () {
	# Only set tags if there was a new tag specified, otherwise skip tagging
	# for that specific field and continue on

	for flac in "${!album_flacs_array[@]}" ; do
		# Grab the TRACKNUMBER and TITLE tags from the current FLAC file
		# that may have been set earlier
		tracknumber_tag="${individual_metadata_array[${album_flacs_array[${flac}]##*/}_tracknumber]}"
		title_tag="${individual_metadata_array[${album_flacs_array[${flac}]##*/}_title]}"

		# Set new TRACKNUMBER tag
		if [[ -n "${tracknumber_tag}" ]] ; then
			metaflac --remove-tag=TRACKNUMBER "${album_flacs_array[${flac}]}"
			metaflac --set-tag=TRACKNUMBER="${tracknumber_tag}" "${album_flacs_array[${flac}]}"
		fi

		# Set new TITLE tag
		if [[ -n "${title_tag}" ]] ; then
			metaflac --remove-tag=TITLE "${album_flacs_array[${flac}]}"
			metaflac --set-tag=TITLE="${title_tag}" "${album_flacs_array[${flac}]}"
		fi
	done
}
__display_album_tags () {
	# Pick the first FLAC file in the current directory and display all the
	# tags that will be changed album-wise (multiple tag)
	for first_flac in "${album_flacs_array[0]}" ; do
		# Artist Tag
		ARTIST="$(metaflac --show-tag=ARTIST "${first_flac}")"
		ARTIST="${ARTIST#*=}"
		if [[ -z "${ARTIST}" ]] ; then
			ARTIST="<empty>"
			printf "%s${CYAN}%s${NORMAL}%s${MAGENTA}%s${NORMAL}\n" "         " "ARTIST:" " " "${ARTIST}"
		else
			printf "%s${CYAN}%s${NORMAL}%s\n" "         " "ARTIST:" " ${ARTIST}"
		fi

		# Album Tag
		ALBUM="$(metaflac --show-tag=ALBUM "${first_flac}")"
		ALBUM="${ALBUM#*=}"
		if [[ -z "${ALBUM}" ]] ; then
			ALBUM="<empty>"
			printf "%s${CYAN}%s${NORMAL}%s${MAGENTA}%s${NORMAL}\n" "          " "ALBUM:" " " "${ALBUM}"
		else
			printf "%s${CYAN}%s${NORMAL}%s\n" "          " "ALBUM:" " ${ALBUM}"
		fi

		# Discnumber Tag
		DISCNUMBER="$(metaflac --show-tag=DISCNUMBER "${first_flac}")"
		DISCNUMBER="${DISCNUMBER#*=}"
		if [[ -z "${DISCNUMBER}" ]] ; then
			DISCNUMBER="<empty>"
			printf "%s${CYAN}%s${NORMAL}%s${MAGENTA}%s${NORMAL}\n" "     " "DISCNUMBER:" " " "${DISCNUMBER}"
		else
			printf "%s${CYAN}%s${NORMAL}%s\n" "     " "DISCNUMBER:" " ${DISCNUMBER}"
		fi

		# Date Tag
		DATE="$(metaflac --show-tag=DATE "${first_flac}")"
		DATE="${DATE#*=}"
		if [[ -z "${DATE}" ]] ; then
			DATE="<empty>"
			printf "%s${CYAN}%s${NORMAL}%s${MAGENTA}%s${NORMAL}\n" "           " "DATE:" " " "${DATE}"
		else
			printf "%s${CYAN}%s${NORMAL}%s\n" "           " "DATE:" " ${DATE}"
		fi

		# Tracktotal Tag
		TRACKTOTAL="$(metaflac --show-tag=TRACKTOTAL "${first_flac}")"
		TRACKTOTAL="${TRACKTOTAL#*=}"
		if [[ -z "${TRACKTOTAL}" ]] ; then
			TRACKTOTAL="<empty>"
			printf "%s${CYAN}%s${NORMAL}%s${MAGENTA}%s${NORMAL}\n" "     " "TRACKTOTAL:" " " "${TRACKTOTAL}"
		else
			printf "%s${CYAN}%s${NORMAL}%s\n" "     " "TRACKTOTAL:" " ${TRACKTOTAL}"
		fi

		# Genre Tag
		GENRE="$(metaflac --show-tag=GENRE "${first_flac}")"
		GENRE="${GENRE#*=}"
		if [[ -z "${GENRE}" ]] ; then
			GENRE="<empty>"
			printf "%s${CYAN}%s${NORMAL}%s${MAGENTA}%s${NORMAL}\n" "          " "GENRE:" " " "${GENRE}"
		else
			printf "%s${CYAN}%s${NORMAL}%s\n" "          " "GENRE:" " ${GENRE}"
		fi

		# ReleaseType Tag
		RELEASETYPE="$(metaflac --show-tag=RELEASETYPE "${first_flac}")"
		RELEASETYPE="${RELEASETYPE#*=}"
		if [[ -z "${RELEASETYPE}" ]] ; then
			RELEASETYPE="<empty>"
			printf "%s${CYAN}%s${NORMAL}%s${MAGENTA}%s${NORMAL}\n" "    " "RELEASETYPE:" " " "${RELEASETYPE}"
		else
			printf "%s${CYAN}%s${NORMAL}%s\n" "    " "RELEASETYPE:" " ${RELEASETYPE}"
		fi

		# Source Tag
		SOURCE="$(metaflac --show-tag=SOURCE "${first_flac}")"
		SOURCE="${SOURCE#*=}"
		if [[ -z "${SOURCE}" ]] ; then
			SOURCE="<empty>"
			printf "%s${CYAN}%s${NORMAL}%s${MAGENTA}%s${NORMAL}\n" "         " "SOURCE:" " " "${SOURCE}"
		else
			printf "%s${CYAN}%s${NORMAL}%s\n" "         " "SOURCE:" " ${SOURCE}"
		fi

		# Mastering Tag
		MASTERING="$(metaflac --show-tag=MASTERING "${first_flac}")"
		MASTERING="${MASTERING#*=}"
		if [[ -z "${MASTERING}" ]] ; then
			MASTERING="<empty>"
			printf "%s${CYAN}%s${NORMAL}%s${MAGENTA}%s${NORMAL}\n" "      " "MASTERING:" " " "${MASTERING}"
		else
			printf "%s${CYAN}%s${NORMAL}%s\n" "      " "MASTERING:" " ${MASTERING}"
		fi
	done
}

# Display each tag field with a prompt to the user to
# "possibly" change the current tag using BASH's builtin
# support for GNU readline
__change_album_tags () {
	if [[ "${ARTIST}" == "<empty>" ]] ; then
		ARTIST=""
	fi

	__place_cursor "${current_line}" 7
	printf "${BOLD_GREEN}%s${NORMAL}" "->"
	__place_cursor "${total_lines}" 0

	printf "%s${CYAN}%s${NORMAL}" \
	"         " "ARTIST:"
	read -r -e -i "${ARTIST}" -p " " artist_tag 

	if [[ "${ARTIST}" != "${artist_tag}" ]] ; then
		if [[ -z "${ARTIST}" ]] ; then
			ARTIST="<empty> -> ${artist_tag}"
		else
			ARTIST="${ARTIST} -> ${artist_tag}"
		fi
	fi

	__place_cursor "${current_line}" 7
	printf "%s${MAGENTA}%s${NORMAL}%s${CYAN}%s${NORMAL}%s" \
	" " "*" " " "ARTIST:" " ${ARTIST}"
	__place_cursor "${total_lines}" 0

	__clear_line

	((current_line++))

	if [[ "${ALBUM}" == "<empty>" ]] ; then
		ALBUM=""
	fi

	__place_cursor "${current_line}" 8
	printf "${BOLD_GREEN}%s${NORMAL}" "->"
	__place_cursor "${total_lines}" 0

	printf "%s${CYAN}%s${NORMAL}" \
	"          " "ALBUM:"
	read -r -e -i "${ALBUM}" -p " " album_tag

	if [[ "${ALBUM}" != "${album_tag}" ]] ; then
		if [[ -z "${ALBUM}" ]] ; then
			ALBUM="<empty> -> ${album_tag}"
		else
			ALBUM="${ALBUM} -> ${album_tag}"
		fi
	fi

	__place_cursor "${current_line}"  8
	printf "%s${MAGENTA}%s${NORMAL}%s${CYAN}%s${NORMAL}%s" \
	" " "*" " " "ALBUM:" " ${ALBUM}"
	__place_cursor "${total_lines}" 0

	__clear_line

	((current_line++))

	if [[ "${DISCNUMBER}" == "<empty>" ]] ; then
		DISCNUMBER=""
	fi

	__place_cursor "${current_line}" 3
	printf "${BOLD_GREEN}%s${NORMAL}" "->"
	__place_cursor "${total_lines}" 0

	printf "%s${CYAN}%s${NORMAL}" \
	"     " "DISCNUMBER:"
	read -r -e -i "${DISCNUMBER}" -p " " discnumber_tag

	if [[ "${DISCNUMBER}" != "${discnumber_tag}" ]] ; then
		if [[ -z "${DISCNUMBER}" ]] ; then
			DISCNUMBER="<empty> -> ${discnumber_tag}"
		else
			DISCNUMBER="${DISCNUMBER} -> ${discnumber_tag}"
		fi
	fi

	__place_cursor "${current_line}" 3
	printf "%s${MAGENTA}%s${NORMAL}%s${CYAN}%s${NORMAL}%s" \
	" " "*" " " "DISCNUMBER:" " ${DISCNUMBER}"
	__place_cursor "${total_lines}" 0

	__clear_line

	((current_line++))

	if [[ "${DATE}" == "<empty>" ]] ; then
		DATE=""
	fi

	__place_cursor "${current_line}" 9
	printf "${BOLD_GREEN}%s${NORMAL}" "->"
	__place_cursor "${total_lines}" 0

	printf "%s${CYAN}%s${NORMAL}" \
	"           " "DATE:"
	read -r -e -i "${DATE}" -p " " date_tag

	if [[ "${DATE}" != "${date_tag}" ]] ; then
		if [[ -z "${DATE}" ]] ; then
			DATE="<empty> -> ${date_tag}"
		else
			DATE="${DATE} -> ${date_tag}"
		fi
	fi

	__place_cursor "${current_line}" 9
	printf "%s${MAGENTA}%s${NORMAL}%s${CYAN}%s${NORMAL}%s" \
	" " "*" " " "DATE:" " ${DATE}"
	__place_cursor "${total_lines}" 0

	printf "\033[K"

	((current_line++))

	if [[ "${TRACKTOTAL}" == "<empty>" ]] ; then
		TRACKTOTAL=""
	fi

	__place_cursor "${current_line}" 3
	printf "${BOLD_GREEN}%s${NORMAL}" "->"
	__place_cursor "${total_lines}" 0

	printf "%s${CYAN}%s${NORMAL}" \
	"     " "TRACKTOTAL:"
	read -r -e -i "${TRACKTOTAL}" -p " " tracktotal_tag

	if [[ "${TRACKTOTAL}" != "${tracktotal_tag}" ]] ; then
		if [[ -z "${TRACKTOTAL}" ]] ; then
			TRACKTOTAL="<empty> -> ${tracktotal_tag}"
		else
			TRACKTOTAL="${TRACKTOTAL} -> ${tracktotal_tag}"
		fi
	fi

	__place_cursor "${current_line}" 3
	printf "%s${MAGENTA}%s${NORMAL}%s${CYAN}%s${NORMAL}%s" \
	" " "*" " " "TRACKTOTAL:" " ${TRACKTOTAL}"
	__place_cursor "${total_lines}" 0

	__clear_line

	((current_line++))

	if [[ "${GENRE}" == "<empty>" ]] ; then
		GENRE=""
	fi

	__place_cursor "${current_line}" 8
	printf "${BOLD_GREEN}%s${NORMAL}" "->"
	__place_cursor "${total_lines}" 0

	printf "%s${CYAN}%s${NORMAL}" \
	"          " "GENRE:"
	read -r -e -i "${GENRE}" -p " " genre_tag

	if [[ "${GENRE}" != "${genre_tag}" ]] ; then
		if [[ -z "${GENRE}" ]] ; then
			GENRE="<empty> -> ${genre_tag}"
		else
			GENRE="${GENRE} -> ${genre_tag}"
		fi
	fi

	__place_cursor "${current_line}" 8
	printf "%s${MAGENTA}%s${NORMAL}%s${CYAN}%s${NORMAL}%s" \
	" " "*" " " "GENRE:" " ${GENRE}"
	__place_cursor "${total_lines}" 0

	__clear_line

	((current_line++))

	if [[ "${RELEASETYPE}" == "<empty>" ]] ; then
		RELEASETYPE=""
	fi

	__place_cursor "${current_line}" 2
	printf "${BOLD_GREEN}%s${NORMAL}" "->"
	__place_cursor "${total_lines}" 0

	printf "%s${CYAN}%s${NORMAL}" \
	"    " "RELEASETYPE:"
	read -r -e -i "${RELEASETYPE}" -p " " releasetype_tag

	if [[ "${RELEASETYPE}" != "${releasetype_tag}" ]] ; then
		if [[ -z "${RELEASETYPE}" ]] ; then
			RELEASETYPE="<empty> -> ${releasetype_tag}"
		else
			RELEASETYPE="${RELEASETYPE} -> ${releasetype_tag}"
		fi
	fi

	__place_cursor "${current_line}" 2
	printf "%s${MAGENTA}%s${NORMAL}%s${CYAN}%s${NORMAL}%s" \
	" " "*" " " "RELEASETYPE:" " ${RELEASETYPE}"
	__place_cursor "${total_lines}" 0

	__clear_line

	((current_line++))

	if [[ "${SOURCE}" == "<empty>" ]] ; then
		SOURCE=""
	fi

	__place_cursor "${current_line}" 7
	printf "${BOLD_GREEN}%s${NORMAL}" "->"
	__place_cursor "${total_lines}" 0

	printf "%s${CYAN}%s${NORMAL}" \
	"         " "SOURCE:"
	read -r -e -i "${SOURCE}" -p " " source_tag

	if [[ "${SOURCE}" != "${source_tag}" ]] ; then
		if [[ -z "${SOURCE}" ]] ; then
			SOURCE="<empty> -> ${source_tag}"
		else
			SOURCE="${SOURCE} -> ${source_tag}"
		fi
	fi

	__place_cursor "${current_line}" 7
	printf "%s${MAGENTA}%s${NORMAL}%s${CYAN}%s${NORMAL}%s" \
	" " "*" " " "SOURCE:" " ${SOURCE}"
	__place_cursor "${total_lines}" 0

	__clear_line

	((current_line++))

	if [[ "${MASTERING}" == "<empty>" ]] ; then
		MASTERING=""
	fi

	__place_cursor "${current_line}" 4
	printf "${BOLD_GREEN}%s${NORMAL}" "->"
	__place_cursor "${total_lines}" 0

	printf "%s${CYAN}%s${NORMAL}" \
	"      " "MASTERING:"
	read -r -e -i "${MASTERING}" -p " " mastering_tag

	if [[ "${MASTERING}" != "${mastering_tag}" ]] ; then
		if [[ -z "${MASTERING}" ]] ; then
			MASTERING="<empty> -> ${mastering_tag}"
		else
			MASTERING="${MASTERING} -> ${mastering_tag}"
		fi
	fi

	__place_cursor "${current_line}" 4
	printf "%s${MAGENTA}%s${NORMAL}%s${CYAN}%s${NORMAL}%s" \
	" " "*" " " "MASTERING:" " ${MASTERING}"
	__place_cursor "${total_lines}" 0

	__clear_line

	((total_lines++))
}

# List the FLAC files in the current directory with
# the song length of each FLAC file
__list_files () {
	for flac in "${!album_flacs_array[@]}" ; do
		# Print current FLAC file with song length
		LENGTH="$(__song_length)"
		printf "\r\033[K%s${BOLD_BLUE}%s${NORMAL}%s\n" \
		"    " "${LENGTH}" " ${album_flacs_array[${flac}]##*/}"
	done
}

# Top banner displaying current working directory
__banner () {
	printf "${BOLD_GREEN}%52s\r%s${CYAN}%s${NORMAL}\n" \
	"${flac_directories[${current_directory}]##*/}" " " "[$(( ${current_directory} + 1 ))/${number_of_directories}]"

	# Separator line
	printf "%s${BOLD_BLUE}%s${NORMAL}\n" " " "───────┬────────────────┬──────────────────────────"
}

# Save screen settings
__save_screen

# This is the directory to process FLACs
directory="${1%/}"

# Find all the FLAC files and store in an array
total_flacs_array=( "${directory}"/**/*.[Ff][Ll][Aa][Cc] )

# Find all the directories to process (ie albums)
for i in "${total_flacs_array[@]}" ; do
	if [[ "${processed_directory}" != "${i%/*}" ]] ; then
		flac_directories+=( "${i%/*}" )
	fi
	processed_directory="${i%/*}"
done

# Grab the number of directories found to process
number_of_directories="${#flac_directories[@]}"

# This will iterate through each directory and on each
# directory, do some processing
for current_directory in "${!flac_directories[@]}" ; do

	until [[ "${retag_album}" == "true" ]] ; do
		# Clear the screen
		__clear_screen

		# Display current directory
		__banner

		# Show album tagging title
		printf "%8s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
		"" "│" " " "Album Metadata" " " "│"

		printf "%8s${BOLD_BLUE}%s${NORMAL}\n" \
		"" "└────────────────┘"

		# Total lines used so far in the header/banner, including
		# the start of the first tag field
		total_lines="4"

		# All the FLAC files in the current processed directory
		album_flacs_array=( "${flac_directories[${current_directory}]}"/**/*.[Ff][Ll][Aa][Cc] )

		# Display the album metadata with the current
		# tags found for each field
		__display_album_tags

		# Separator line
		printf "%s${BOLD_BLUE}%s${NORMAL}\n" " " "───────────────────────────────────────────────────"

		# Total number of lines used thus far (banner, tag fields, spacing)
		total_lines=15

		# The current line is the current tag field being processed (with ->)
		# used in the below function when reading/setting new tags
		current_line=5

		# Display each album field with user prompt
		__change_album_tags

		# Prompt user whether album metadata should be saved and
		# continue with the file metadata
		__save_album_tags_prompt
	done

	#until [[ "${retag_tracks}" == "true" ]] ; do

		# If user had previously specified "No" in the previous prompt
		# Show album tagging title
		# Separator line
		printf "%s${BOLD_BLUE}%s${NORMAL}\n" \
		" " "──┬───────────────────────────┬────────────────────"

		printf "%3s${BOLD_BLUE}%s${NORMAL}%s${YELLOW}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}\n" \
		"" "│" " " "Individual Track Metadata" " " "│"

		printf "%3s${BOLD_BLUE}%s${NORMAL}\n" \
		"" "└───────────────────────────┘"

		# Show a listing of FLAC files in current directory
		__list_files

		# Separator line
		printf "%s${BOLD_BLUE}%s${NORMAL}\n" " " "───────────────────────────────────────────────────"

		# The current line is the total lines so far (without the FLAC file
		# listing plus 3 for spacing)
		current_line="$(( ${total_lines} + 3 ))"

		# Total number of lines used thus far (banner, tag fields,
		# spacing, # of flac files)
		total_lines="$(( ${total_lines} + ${#album_flacs_array[@]} + 4 ))"

		for flac in "${!album_flacs_array[@]}" ; do
			# Declare an associative array to catalogue which files
			# have which tags added
			declare -A individual_metadata_array

			# Print current FLAC file with song length
			LENGTH="$(__song_length)"

			__place_cursor "${current_line}" 2
			printf "${BOLD_GREEN}%s${NORMAL}" "->"
			__place_cursor "${total_lines}" 0

			# Tracknumber Tag
			TRACKNUMBER="$(metaflac --show-tag=TRACKNUMBER "${album_flacs_array[${flac}]}")"
			TRACKNUMBER="${TRACKNUMBER#*=}"
			if [[ -z "${TRACKNUMBER}" ]] ; then
				TRACKNUMBER="<empty>"
			fi

			# Title Tag
			TITLE="$(metaflac --show-tag=TITLE "${album_flacs_array[${flac}]}")"
			TITLE="${TITLE#*=}"
			if [[ -z "${TITLE}" ]] ; then
				TITLE="<empty>"
			fi

			if [[ "${TITLE}" == "<empty>" ]] ; then
				TITLE=""
			fi
			if [[ "${TRACKNUMBER}" == "<empty>" ]] ; then
				TRACKNUMBER=""
			fi

			printf "\r\033[K%s${CYAN}%s${NORMAL}" \
			" " "TRACKNUMBER / TITLE:"
			read -r -e -a tracknumber_title_array -i "${TRACKNUMBER} ${TITLE}" -p " "

			__place_cursor "${total_lines}" 0

			__place_cursor "${current_line}" 2

			printf "%s${MAGENTA}%s${NORMAL}%s${BOLD_BLUE}%s${NORMAL}%s\n" \
			" " "*" " " "${LENGTH}" " ${album_flacs_array[${flac}]##*/}"

			((current_line++))

			# Set the new metadata into the associative array for processing later
			# only if the user set a NEW tag

			# TRACKNUMBER
			if [[ -n "${tracknumber_title_array[0]}" && "${tracknumber_title_array[0]}" != "${TRACKNUMBER}" ]] ; then
				individual_metadata_array+=( ["${album_flacs_array[${flac}]##*/}_tracknumber"]="${tracknumber_title_array[0]}" )
			fi
			# TITLE
			if [[ -n "${tracknumber_title_array[@]:1}" && "${tracknumber_title_array[@]:1}" != "${TITLE}" ]] ; then
				individual_metadata_array+=( ["${album_flacs_array[${flac}]##*/}_title"]="${tracknumber_title_array[@]:1}" )
			fi
		done

		# Prompt user whether file metadata should be saved
		# continuing on with final prompt
		__save_track_tags_prompt
	#done

	# Final prompt to decide whether metadata should be
	# applied to all files in the current directory
	__tag_directory_final_prompt

done

# Restore screen settings
__restore_screen
